[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 vimure authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/karnataka.html","id":"read-the-edgelist","dir":"Articles","previous_headings":"","what":"Read the edgelist","title":"Karnataka Data","text":"First ’ll need read edgelist. , run code preprocess data, removing self-loops re-labeling layers names.","code":"URL <- \"https://raw.githubusercontent.com/latentnetworks/vimure/develop/data/input/india_microfinance/formatted/\" village <- \"12\" # change this parameter to run in other village  PATH <- paste0(URL, paste0(\"vil\", village, \"_edges.csv\")) df_edges <- read.csv(PATH, stringsAsFactors = F) head(df_edges) #>   respondent       i       j        type weight #> 1    1200101 1200101 1202101 borrowmoney      1 #> 2    1200102 1200102 1200402 borrowmoney      1 #> 3    1200201 1200201 1207901 borrowmoney      1 #> 4    1200202 1200202 1216002 borrowmoney      1 #> 5    1200801 1200801 1200601 borrowmoney      1 #> 6    1200802 1200802 1200901 borrowmoney      1 df_edges$layer <- factor(df_edges$type,    levels=c(     \"borrowmoney\",\"receivemoney\", \"receiveadvice\", \"helpdecision\",     \"keroricego\", \"keroricecome\", \"visitgo\", \"visitcome\"     ), labels=c(\"money\", \"money\", \"advice\", \"advice\", \"kerorice\", \"kerorice\", \"visit\", \"visit\"))  layer <- \"visit\" # Change this to run for a different layer df_edges <- df_edges[df_edges$layer %in% layer, ] df_edges <- df_edges[df_edges$i != df_edges$j, ] head(df_edges) #>      respondent       i       j    type weight layer #> 2022    1200101 1200101 1200401 visitgo      1 visit #> 2023    1200102 1200102 1212904 visitgo      1 visit #> 2024    1200201 1200201 1206102 visitgo      1 visit #> 2025    1200202 1200202 1200401 visitgo      1 visit #> 2026    1200801 1200801 1208701 visitgo      1 visit #> 2027    1200802 1200802 1214902 visitgo      1 visit"},{"path":"/articles/karnataka.html","id":"using-an-igraph-network","dir":"Articles","previous_headings":"Read the edgelist","what":"Using an igraph network","title":"Karnataka Data","text":"Vimure models expects input igraph object can contains layer, reporter weight edge. Use igraph::graph_from_data_frame create graph using dataset. first two columns edgelist. Additional columns considered edge attributes (See ?graph_from_data_frame). Vimure extracts attributes name, crucial rename attributes creating graph (parse edgelist directly parse_graph_from_edgelist use params ego,alter,.. mapping columns names - section ):  Calculate network statistics adjacency matrix: Run model:","code":"edges <- df_edges[c(2:5, 1)] # Reorder columns names(edges) <- c(\"Ego\", \"Alter\", \"layer\", \"weight\", \"reporter\") # Rename graph <- igraph::graph_from_data_frame(edges)  graph <- set_graph_attr(graph, \"layout\", layout_with_fr(graph, niter=600)) plot(graph,      vertex.size=2,      vertex.label=NA,      edge.width=0.5,      edge.arrow.size=0.5,       edge.arrow.width=0.5) message(   \"Nodes: \", length(V(graph)),   \" | Edges: \", gsize(graph),   \" | Avg. degree: \", mean(degree(graph)), #directed graph,   \" | Reciprocity: \", reciprocity(graph) ) #> Nodes: 336 | Edges: 891 | Avg. degree: 5.30357142857143 | Reciprocity: 0.7003367003367 # Graph input model <- vimure(graph, num_realisations=1L, max_iter=100L, seed=5, mutuality = T) #> Loaded vimure version"},{"path":"/articles/karnataka.html","id":"parsing-data-to-vimure-classes","dir":"Articles","previous_headings":"Read the edgelist","what":"Parsing data to vimure classes","title":"Karnataka Data","text":"Vimure models expect input attributes X R parse_graph_from_edgelist result. parse_graph_from_edgelist expects dataframe two required columns (Ego Alter) three optional columns ( layer, reporter weight). Rename dataframe’s columns use params ego,alter,… parse_graph_from_edgelist mapping column names convert. run model:","code":"vm_graph <- parse_graph_from_edgelist(df_edges, ego=\"i\", alter=\"j\", reporter=\"respondent\") model <- vimure(vm_graph$X, vm_graph$R, num_realisations=1L, max_iter=100L, seed=5, mutuality = T)"},{"path":"/articles/karnataka.html","id":"diagnostics","dir":"Articles","previous_headings":"","what":"Diagnostics","title":"Karnataka Data","text":"","code":"diag <- summary(model) #> --------------- #> - DIAGNOSTICS - #> --------------- #>  #> Model: ViMuRe(T) #>  #>   Priors: #>    - eta:    shp=0.50 rte=1.00 #>    - theta:  shp=0.10 rte=0.10 #>    - lambda: shp=10.0 rte=10.0 #>    - rho:    a (1, 336, 336, 2) tensor (to inspect it, run <diag_obj>.model.pr_rho) #>  #>   Posteriors: #>    - G_exp_lambda_f: [[8.29686167e-05 4.42361315e-01]] #>    - G_exp_nu_f: 0.67 #>    - G_exp_theta_f: a (1, 336) tensor (to inspect it, run <diag_obj>.model.G_exp_theta_f) #>    - rho_f: a (1, 336, 336, 2) tensor (to inspect it, run <diag_obj>.model.rho_f) #>  #> Optimisation: #>  #>    Elbo: 66.999016615684"},{"path":"/articles/karnataka.html","id":"elbo-values","dir":"Articles","previous_headings":"Diagnostics","what":"Elbo values","title":"Karnataka Data","text":"","code":"df_elbo <- diag$trace  ggplot2::ggplot(df_elbo, ggplot2::aes(x=iter, y=elbo, group=realisation, color=factor(realisation))) +   ggplot2::geom_point() +   ggplot2::geom_line(size=1.2) +   ggplot2::theme_bw() +   ggplot2::labs(x = \"Iter\", y=\"ELBO\", color=\"Realisation\")"},{"path":"/articles/karnataka.html","id":"estimated-reliability","dir":"Articles","previous_headings":"Diagnostics","what":"Estimated reliability","title":"Karnataka Data","text":"## Reconstruct Y matrix","code":"plot_df <- reshape2::melt(diag$reliability, id = \"node\")  ggplot2::ggplot(plot_df, aes(x = reorder(factor(node), -value), y=value)) +   ggplot2::geom_point(alpha = 0.4, size=2, color = \"#c45241\") +   ggplot2::theme_bw() +   ggplot2::labs(x = \"Nodes sorted from over-to under- reporting\", y = \"Realibility values\") +   ggplot2::theme(axis.text.x=element_blank()) Y_hat <- get_inferred_model(model)  graph <- graph_from_adjacency_matrix(Y_hat[1, , ], mode = \"directed\")  graph <- set_graph_attr(graph, \"layout\", layout_with_fr(graph, niter=600)) plot(graph,      vertex.size=2,      vertex.label=NA,      edge.width=0.5,      edge.arrow.size=0.5,       edge.arrow.width=0.5)"},{"path":"/articles/quick_start.html","id":"generate-synthetic-data","dir":"Articles","previous_headings":"","what":"Generate synthetic data","title":"Introduction to vimure","text":"First create object desired synthetic network class:","code":"net <- gm_Multitensor(N=100, M=100, L=1, C=2, K=2, avg_degree=10, seed=24, sparsify=T, eta=0.5) #> Loaded vimure version  # Ground Truth Network Y <- net$Y$toarray() layer <- 1 # Change to plot others layers for multiply-layers networks  graph <- graph_from_adjacency_matrix(Y[layer, , ], mode = \"directed\")  graph <- set_graph_attr(graph, \"layout\", layout_with_fr(graph, niter=600)) plot(graph,      vertex.size=5,      vertex.label=NA,      edge.width=0.5,      edge.arrow.size=0.5,       edge.arrow.width=0.5)"},{"path":"/articles/quick_start.html","id":"python-interface","dir":"Articles","previous_headings":"Generate synthetic data","what":"Python interface","title":"Introduction to vimure","text":"vimure R binding Python package. Many Python basic objects quickly converted R automatically. Custom Python objects can converted automatically stored R python.builtin.object. python.builtin.object, can access object’s attributes Python using dollar sign $. Use function class check object stored Python. net stored Python object. can access attributes using dollar sign $. Calculate network statistics adjacency matrix: , given network Y, can generate N observed adjacency matrices reported reporting nodes \\(m\\) \\(m \\N\\) achieved function build_X. Example: Use code explore network point view different reporting nodes:","code":"class(net) #> [1] \"vimure.synthetic.Multitensor\"          #> [2] \"vimure.synthetic.StandardSBM\"          #> [3] \"vimure.synthetic.BaseSyntheticNetwork\" #> [4] \"vimure.io.BaseNetwork\"                 #> [5] \"python.builtin.object\" net$Y # still a python object because it is a sptensor #> <sktensor.sptensor.sptensor object at 0x7efc43eff910>  Y <- net$Y$toarray() # Convert to array class(Y) #> [1] \"array\" message(   \"Nodes: \", length(V(graph)),   \" | Edges: \", gsize(graph),   \" | Avg. degree: \", mean(degree(graph)), #directed graph,   \" | Reciprocity: \", reciprocity(graph) ) #> Nodes: 100 | Edges: 452 | Avg. degree: 9.04 | Reciprocity: 0.442477876106195 X <- build_X(net, flag_self_reporter=T, cutoff_X=F, seed=10L) dim(X) #> [1]   1 100 100 100 reporter_id <- 31 message(\"Reporter ID=\", reporter_id,\" | theta= \", net$theta[layer, reporter_id]) #> Reporter ID=31 | theta= 3.5318623440758  X_current <- X[layer,,,reporter_id] X_current <- X_current[rowSums(X_current[,-1]) != 0, colSums(X_current[-1,]) != 0]  ggcorrplot( X_current) +     ggplot2::scale_fill_gradient(low=\"white\",high=\"#003396\") #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale."},{"path":"/articles/quick_start.html","id":"run-model","dir":"Articles","previous_headings":"","what":"Run model","title":"Introduction to vimure","text":"R can construct fit vimure model using vimure function. vimure function inherit arguments original VimudeModel class VimureModel.fit(). See info arguments help(vimure). R, vimure takes data input adjancency matrix igraph object. Note: Run model without mutuality particularly useful since know network level reciprocity mutuality. testing purposes .","code":"model <- vimure(net$X, net$R, mutuality=T, K=2, num_realisations=5, max_iter=1000)"},{"path":"/articles/quick_start.html","id":"diagnostics","dir":"Articles","previous_headings":"Run model","what":"Diagnostics","title":"Introduction to vimure","text":"Use summary produce result summaries results model. output summary R list contains vimure’s priors posteriors . can access results plot analyse final model. Open issue repository make request new metrics summary.","code":"diag <- summary(model) #> --------------- #> - DIAGNOSTICS - #> --------------- #>  #> Model: ViMuRe(T) #>  #>   Priors: #>    - eta:    shp=0.50 rte=1.00 #>    - theta:  shp=0.10 rte=0.10 #>    - lambda: shp=10.0 rte=10.0 #>    - rho:    a (1, 100, 100, 2) tensor (to inspect it, run <diag_obj>.model.pr_rho) #>  #>   Posteriors: #>    - G_exp_lambda_f: [[1.39677408e-03 1.51320268e+00]] #>    - G_exp_nu_f: 0.71 #>    - G_exp_theta_f: a (1, 100) tensor (to inspect it, run <diag_obj>.model.G_exp_theta_f) #>    - rho_f: a (1, 100, 100, 2) tensor (to inspect it, run <diag_obj>.model.rho_f) #>  #> Optimisation: #>  #>    Elbo: 948.372039813682"},{"path":"/articles/quick_start.html","id":"inferred-model","dir":"Articles","previous_headings":"Run model","what":"Inferred model","title":"Introduction to vimure","text":"Use get_inferred_model() sample_inferred_model() reconstruct Y matrix using distribution rho_f. ","code":"Y_hat <- get_inferred_model(model)  # Compared Y_hat to ground truth Y table(Y_hat,Y) #>      Y #> Y_hat    0    1 #>     0 9333  301 #>     1  215  151"},{"path":"/articles/synthetic.html","id":"generating-ground-truth-networks---y","dir":"Articles","previous_headings":"","what":"Generating Ground Truth Networks - Y","title":"Synthetic data","text":"Simply create object desired synthetic network class (info arguments others synthetic models help(gm_Multitensor)):  Plot network data:  Calculate network statistics adjacency matrix:","code":"random_net <- gm_Multitensor(N=100, M=100, L=1, C=2, avg_degree=10, sparsify=T, eta=0.99, seed=10) #> Loaded vimure version  Y <- random_net$Y$toarray()  ggcorrplot(Y[1, ,]) +     ggplot2::scale_fill_gradient(low=\"white\",high=\"#003396\") #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale. graph <- graph_from_adjacency_matrix(Y[1, , ], mode = \"directed\") graph <- set_graph_attr(graph, \"layout\", layout_with_fr(graph, niter=600)) plot(graph,      vertex.size=5,      vertex.label=NA,      edge.width=0.5,      edge.arrow.size=0.5,       edge.arrow.width=0.5) message(   \"Nodes: \", length(V(graph)),   \" | Edges: \", gsize(graph),   \" | Avg. degree: \", mean(degree(graph)), #directed graph,   \" | Reciprocity: \", reciprocity(graph) ) #> Nodes: 100 | Edges: 386 | Avg. degree: 7.72 | Reciprocity: 0.787564766839378"},{"path":"/articles/synthetic.html","id":"generating-observed-networks---x","dir":"Articles","previous_headings":"","what":"Generating Observed Networks - X","title":"Synthetic data","text":"Given network Y, can generate N observed adjacency matrices reported reporting nodes \\(m\\) \\(m \\N\\). achieved function build_X. Example:","code":"X <- build_X(random_net, flag_self_reporter=T, cutoff_X=F, seed=10L) dim(X) #> [1]   1 100 100 100"},{"path":"/articles/synthetic.html","id":"reliability-parameter-theta---drawn-from-a-gamma-distribution","dir":"Articles","previous_headings":"Generating Observed Networks - X","what":"‘Reliability’ parameter \\(\\theta\\) - drawn from a gamma distribution","title":"Synthetic data","text":"Nodes reliable report imperfect views ground truth network. ‘reliability’ nodes represented parameter \\(\\theta_{lm}\\) default modeled gamma function shape sh_theta scale sc_theta: \\[ \\theta_{lm} \\sim \\Gamma(sh\\_theta, sc\\_theta) \\] function build_X uses sh_theta = 2.0 sc_theta = 0.5 default. distribution looks follow:  setup aims represent ‘reliable’ reporters \\(\\theta = 1.0\\). Reporters low \\(\\theta\\) (\\(\\theta \\0\\)) tend -report high \\(\\theta\\) (unbounded) -report social ties.  take average X (considering reporter’s mask), look like :","code":"build_X(random_net, sh_theta=2.0, sc_theta=0.5) # Default values theta <- rgamma(2000, shape = 2, scale = 0.5) hist(theta, breaks=50, prob = T, xlab = \"Reliability parameter (theta)\") lines(density(theta), col=\"red\", lwd=2) layer <- 1 reporter_id <- 31 # Change this to view the network from the point of view of different reporters  message(\"Reporter ID=\", reporter_id,\" | theta= \", random_net$theta[layer, reporter_id]) #> Reporter ID=31 | theta= 3.5318623440758  X_current <- X[layer,,,reporter_id] X_current <- X_current[rowSums(X_current[,-1]) != 0, colSums(X_current[-1,]) != 0]  ggcorrplot( X_current) +     ggplot2::scale_fill_gradient(low=\"white\",high=\"#003396\") #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale. Xavg <- extract_Xavg(random_net)  ggcorrplot( Xavg[layer, ,]) +     ggplot2::scale_fill_gradient(low=\"white\", high=\"#003396\") #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale."},{"path":"/articles/synthetic.html","id":"reliability-parameter-theta---custom","dir":"Articles","previous_headings":"Generating Observed Networks - X","what":"‘Reliability’ parameter \\(\\theta\\) - custom","title":"Synthetic data","text":"Instead drawing \\(\\theta\\) Gamma distribution, one just simply pass list reliability parameters per node. used simulate exaggeration scenarios (-reporters -reporters). using custom theta, pass function build_X:","code":"theta_ratio <- 0.20 # percentage of reporters that are exaggerators exaggeration_type <- \"over\" # exaggerators are over-reporters  custom_theta <- build_custom_theta(     random_net,     theta_ratio=theta_ratio,     exaggeration_type=exaggeration_type,     seed = 1L )  custom_theta #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]    1    1    1    1    1    1    1    1    1     1    50     1     1     1 #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,]     1     1     1    50     1     1     1     1     1     1     1     1 #>      [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] #> [1,]     1     1     1     1     1    50    50    50     1     1    50     1 #>      [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] #> [1,]     1    50     1     1     1     1    50     1     1     1     1     1 #>      [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] #> [1,]     1    50    50     1     1     1    50     1     1     1     1     1 #>      [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] #> [1,]     1     1     1    50     1     1     1    50     1     1     1     1 #>      [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] #> [1,]     1     1     1     1    50     1    50    50    50     1    50     1 #>      [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98] #> [1,]     1     1     1     1     1     1    50    50     1     1     1     1 #>      [,99] [,100] #> [1,]     1      1 X_custom <- build_X(   random_net,   flag_self_reporter=T,   seed=10L,   theta=custom_theta,    cutoff_X=T )  Xavg <- extract_Xavg(random_net) ggcorrplot( Xavg[1, ,]) +     ggplot2::scale_fill_gradient(low=\"white\", high=\"#003396\") #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale."},{"path":"/articles/synthetic.html","id":"mutuality-parameter-eta","dir":"Articles","previous_headings":"Generating Observed Networks - X","what":"Mutuality Parameter \\(\\eta\\)","title":"Synthetic data","text":"model, simulate double-sampled reports. reporter \\(m\\) responds giving receiving social support two nodes \\(\\) \\(j\\). Therefore, every tie type sampled twice reporter, one direction interaction: \\(\\j\\) \\(j \\\\). mutuality parameter (\\(\\eta\\)) models people’s propensity naming individuals across prompts. example impossibly High Mutuality X  example mutuality X (\\(\\eta = 0.0\\))  Remember: X adjacency matrices generated exact ground truth Y. One play around parameters bit investigate imagine different scenarios reporting inaccuracy.","code":"X_custom <- build_X(random_net, cutoff_X=T, mutuality=0.99, flag_self_reporter=T, seed=10L) Xavg <- extract_Xavg(random_net) ggcorrplot( Xavg[1, ,]) +     ggplot2::scale_fill_gradient(low=\"white\", high=\"#003396\") #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale. X_custom <- build_X(random_net, cutoff_X=T, mutuality=0, flag_self_reporter=T, seed=10L) Xavg <- extract_Xavg(random_net)  ggcorrplot( Xavg[1, ,]) +     ggplot2::scale_fill_gradient(low=\"white\", high=\"#003396\") #> Scale for 'fill' is already present. Adding another scale for 'fill', which #> will replace the existing scale."},{"path":"/articles/vimure.html","id":"install-the-released-version","dir":"Articles","previous_headings":"","what":"Install the released version","title":"Install","text":"First, install vimure R package GitHub follows: , use install_vimure() function R install python package dependencies. Note reticulate find non-system installation python may prompted want download install miniconda. Miniconda recommended installation method users, ensures R python installation isolated python installations. initially declined miniconda installation prompt, can later manually install miniconda running reticulate::install_miniconda() Please restart R session install_vimure. PS: ’s necessary Rstudio users. can confirm installation succeeded : provide default installation VIMuRe suitable use vimure R package.","code":"devtools::install_github(\"latentnetworks/vimure\", subdir=\"src/R\", ref=\"develop\") library(vimure) vimure::install_vimure() library(vimure) vimure::vm_config() #> Loaded vimure version #> Vimure v (~/Git/vimure/vimure/venv/lib/python3.8/site-packages/vimure) #> Python v3.8 (~/Git/vimure/vimure/venv/bin/python3)"},{"path":"/articles/vimure.html","id":"advanced-setup","dir":"Articles","previous_headings":"","what":"Advanced setup","title":"Install","text":"VIMuRe distributed Python package needs installed within Python environment system. default, install_vimure() function attempts install VIMuRe within isolated Python environment (“r-reticulate”). Note install_vimure() isn’t required use VIMuRe package. manually configure python environment required dependencies, can tell R use pointing reticulate , commonly setting environment variable: default, install_vimure() install latest develop branch VIMuRe can override behavior specifying version parameter. example: can also install local version VIMuRe specifying URL/Path VIMuRe binary. example:","code":"Sys.setenv(\"RETICULATE_PYTHON\" = \"~/path/to/python-env/bin/python\") install_vimure(version = \"master\") install_vimure(version = \"~/Git/vimure/src/python\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Caterina de Bacco. Author. Jonathan Cardoso-Silva. Author, translator. Gabriela Borges. Maintainer, translator.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Bacco C, Cardoso-Silva J (2022). vimure: VIMuRe: Latent Network Models Account Noisy, Multiply-Reported Social Network Data. R package version 0.0.0.9000.","code":"@Manual{,   title = {vimure: VIMuRe: Latent Network Models to Account for Noisy, Multiply-Reported Social Network Data},   author = {Caterina {de Bacco} and Jonathan Cardoso-Silva},   year = {2022},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"vimure","dir":"","previous_headings":"","what":"VIMuRe: Latent Network Models to Account for Noisy, Multiply-Reported Social Network Data","title":"VIMuRe: Latent Network Models to Account for Noisy, Multiply-Reported Social Network Data","text":"Latent Network Models Account Noisy, Multiply-Reported Social Network Data. De Bacco C, Contisciani M, Cardoso-Silva J, Safdari H, Baptista D, Sweet T, Young JG, Koster J, Ross CT, McElreath R, Redhead D, Power EA. Latent Network Models Account Noisy, Multiply-Reported Social Network Data. arXiv preprint arXiv:2112.11396. VIMuRe package available R Python.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"VIMuRe: Latent Network Models to Account for Noisy, Multiply-Reported Social Network Data","text":"","code":"install.packages(\"devtools\") devtools::install_github(\"latentnetworks/vimure\", subdir=\"src/R\", ref=\"develop\")"},{"path":"/index.html","id":"feedback","dir":"","previous_headings":"","what":"Feedback","title":"VIMuRe: Latent Network Models to Account for Noisy, Multiply-Reported Social Network Data","text":"Report bug give general feedback library: - taking survey , - opening issue Github.","code":""},{"path":"/reference/build_X.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating Observed Networks - X — build_X","title":"Generating Observed Networks - X — build_X","text":"Given network Y, can generate N observed adjacency matrices reported reporting nodes $m$ ($m N$).","code":""},{"path":"/reference/build_X.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating Observed Networks - X — build_X","text":"","code":"build_X(   synthetic,   mutuality = 0.5,   sh_theta = 2,   sc_theta = 0.5,   theta = NULL,   flag_self_reporter = T,   Q = NULL,   cutoff_X = F,   lambda_diff = NULL,   verbose = T,   ... )"},{"path":"/reference/build_X.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating Observed Networks - X — build_X","text":"synthetic synthetic model mutuality mutuality parameter (0 1) sh_theta Shape gamma distribution draw theta. 'reliability' nodes represented parameter $theta_lm$ default modelled gamma function shape sh_theta scale sc_theta. sc_theta Scale gamma distribution draw theta. theta Custom values theta, provided sh_theta sc_theta ignored. flag_self_reporter Indicates whether node can report ties (default true). Q Maximum value X entries. None, use network's K parameter cutoff_X Whether set X binary lambda_diff difference subsequent K verbose Provides additional details ... Additional args synthetic$build_X() method.","code":""},{"path":"/reference/build_X.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating Observed Networks - X — build_X","text":"sptensor","code":""},{"path":"/reference/build_X.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating Observed Networks - X — build_X","text":"","code":"random_net <- gm_Multitensor(N=100, M=100, L=1, eta=0.99) #> Loaded vimure version  X <- build_X(random_net, flag_self_reporter=TRUE, cutoff_X=FALSE, seed=10L) dim(X) #> [1]   1 100 100 100"},{"path":"/reference/build_custom_theta.html","id":null,"dir":"Reference","previous_headings":"","what":"Customize 'Reliability' parameter theta — build_custom_theta","title":"Customize 'Reliability' parameter theta — build_custom_theta","text":"Instead regular generative model theta (theta ~ Gamma(sh, sc)), create extreme scenario percentage reporters exaggerating.","code":""},{"path":"/reference/build_custom_theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customize 'Reliability' parameter theta — build_custom_theta","text":"","code":"build_custom_theta(   synthetic,   theta_ratio = 0.5,   exaggeration_type = c(\"over\", \"under\"),   seed = NULL )"},{"path":"/reference/build_custom_theta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customize 'Reliability' parameter theta — build_custom_theta","text":"synthetic synthetic model theta_ratio Percentage reporters exaggerate [0,1] exaggeration_type \"\" \"\" seed Pseudo random generator seed use","code":""},{"path":"/reference/build_custom_theta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Customize 'Reliability' parameter theta — build_custom_theta","text":"L x M matrix theta","code":""},{"path":"/reference/extract_Xavg.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Xavg matrix — extract_Xavg","title":"Extract the Xavg matrix — extract_Xavg","text":"Average value observed network X reporter mask.","code":""},{"path":"/reference/extract_Xavg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Xavg matrix — extract_Xavg","text":"","code":"extract_Xavg(synthetic)"},{"path":"/reference/extract_Xavg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Xavg matrix — extract_Xavg","text":"synthetic synthetic model","code":""},{"path":"/reference/extract_Xavg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Xavg matrix — extract_Xavg","text":"matrix","code":""},{"path":"/reference/extract_Xavg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the Xavg matrix — extract_Xavg","text":"","code":"random_net <- gm_Multitensor(N=100, M=100, L=1, eta=0.99) X <- build_X(random_net) Xavg <- extract_Xavg(random_net) dim(Xavg) #> [1]   1 100 100"},{"path":"/reference/get_inferred_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Y — get_inferred_model","title":"Estimate Y — get_inferred_model","text":"Estimate Y","code":""},{"path":"/reference/get_inferred_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Y — get_inferred_model","text":"","code":"get_inferred_model(object, method = \"rho_max\", threshold = NULL)"},{"path":"/reference/get_inferred_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Y — get_inferred_model","text":"object \"vimure\" object. method character string indicating method computed. One \"rho_max\" (default), \"rho_mean\", \"fixed_threshold\" \"heuristic_threshold\". threshold threshold used method = \"fixed_threshold\".","code":""},{"path":"/reference/get_inferred_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Y — get_inferred_model","text":"Use function reconstruct Y matrix fitted vimure model. use model$rho_f values extract estimated Y matrix. rho_max: Assign value highest probability rho_mean: Expected value discrete distribution fixed_threshold: Check probability higher threshold (2 categories) heuristic_threshold: Calculate use best threshold (2 categories)","code":""},{"path":[]},{"path":"/reference/gm_DegreeCorrectedSBM.html","id":null,"dir":"Reference","previous_headings":"","what":"Degree-corrected stochastic blockmodel — gm_DegreeCorrectedSBM","title":"Degree-corrected stochastic blockmodel — gm_DegreeCorrectedSBM","text":"generative model incorporates heterogeneous vertex degrees stochastic blockmodels, improving performance models statistical inference group structure. information model, see Karrer, B., & Newman, M. E. (2011). Stochastic blockmodels community structure networks. Physical review E, 83(1), 016107. DOI:10.1103/PhysRevE.83.016107","code":""},{"path":"/reference/gm_DegreeCorrectedSBM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degree-corrected stochastic blockmodel — gm_DegreeCorrectedSBM","text":"","code":"gm_DegreeCorrectedSBM(   N = 100,   M = 100,   K = 2,   L = 1,   C = 2,   avg_degree = 10,   exp_in = 2,   exp_out = 2.5,   sparsify = TRUE,   seed = 10 )"},{"path":"/reference/gm_DegreeCorrectedSBM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Degree-corrected stochastic blockmodel — gm_DegreeCorrectedSBM","text":"N Number nodes M Number reporters K Maximum edge weight adjacency matrix. K=2 (default), adjacency matrix contain Y(ij)=0 Y(ij)=1. L Number layers (tested L=1) C Number communities avg_degree Desired average degree network. guaranteed ultimate network exact average degree value. Try tweaking parameter want increase decrease density network. exp_in Exponent power law -degree distribution exp_out Exponent power law -degree distribution sparsify True (default), enforce sparsity. seed Pseudo random generator seed use","code":""},{"path":"/reference/gm_DegreeCorrectedSBM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Degree-corrected stochastic blockmodel — gm_DegreeCorrectedSBM","text":"gm_DegreeCorrectedSBM model","code":""},{"path":[]},{"path":"/reference/gm_DegreeCorrectedSBM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Degree-corrected stochastic blockmodel — gm_DegreeCorrectedSBM","text":"","code":"random_net <- gm_DegreeCorrectedSBM(exp_in = 2, exp_out = 2.5) Y <- random_net$Y$toarray() dim(Y) #> [1]   1 100 100"},{"path":"/reference/gm_Multitensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Generative Model with Reciprocity (CRep) — gm_Multitensor","title":"Generative Model with Reciprocity (CRep) — gm_Multitensor","text":"mathematically principled generative model capturing community reciprocity patterns directed networks. information model, see Safdari, H., Contisciani, M., & De Bacco, C. (2021). Generative model reciprocity community detection networks. Physical Review Research, 3(2), 023209. DOI:10.1103/PhysRevResearch.3.023209.","code":""},{"path":"/reference/gm_Multitensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generative Model with Reciprocity (CRep) — gm_Multitensor","text":"","code":"gm_Multitensor(   N = 100,   M = 100,   K = 2,   L = 1,   C = 2,   avg_degree = 10,   sparsify = TRUE,   eta = 0.99,   seed = 10 )"},{"path":"/reference/gm_Multitensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generative Model with Reciprocity (CRep) — gm_Multitensor","text":"N Number nodes M Number reporters K Maximum edge weight adjacency matrix. K=2 (default), adjacency matrix contain Y(ij)=0 Y(ij)=1. L Number layers (tested L=1) C Number communities avg_degree Desired average degree network. guaranteed ultimate network exact average degree value. Try tweaking parameter want increase decrease density network. sparsify True (default), enforce sparsity. eta Initial value reciprocity coefficient. Eta [0, 1). seed Pseudo random generator seed use","code":""},{"path":"/reference/gm_Multitensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generative Model with Reciprocity (CRep) — gm_Multitensor","text":"gm_Multitensor model","code":""},{"path":[]},{"path":"/reference/gm_Multitensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generative Model with Reciprocity (CRep) — gm_Multitensor","text":"","code":"random_net <- gm_Multitensor(N=100, M=100, L=1, eta=0.5) Y <- random_net$Y$toarray() dim(Y) #> [1]   1 100 100"},{"path":"/reference/gm_StandardSBM.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard stochastic blockmodel — gm_StandardSBM","title":"Standard stochastic blockmodel — gm_StandardSBM","text":"generative graph model assumes probability connecting two nodes graph determined entirely block assignments. information model, see Holland, P. W., Laskey, K. B., & Leinhardt, S. (1983). Stochastic blockmodels: First steps. Social networks, 5(2), 109-137. DOI:10.1016/0378-8733(83)90021-7","code":""},{"path":"/reference/gm_StandardSBM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard stochastic blockmodel — gm_StandardSBM","text":"","code":"gm_StandardSBM(   N = 100,   M = 100,   K = 2,   L = 1,   C = 2,   avg_degree = 10,   sparsify = TRUE,   overlapping = 0,   seed = 10 )"},{"path":"/reference/gm_StandardSBM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard stochastic blockmodel — gm_StandardSBM","text":"N Number nodes M Number reporters K Maximum edge weight adjacency matrix. K=2 (default), adjacency matrix contain Y(ij)=0 Y(ij)=1. L Number layers (tested L=1) C Number communities avg_degree Desired average degree network. guaranteed ultimate network exact average degree value. Try tweaking parameter want increase decrease density network. sparsify True (default), enforce sparsity. overlapping Fraction nodes mixed membership. [0, 1). seed Pseudo random generator seed use","code":""},{"path":"/reference/gm_StandardSBM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard stochastic blockmodel — gm_StandardSBM","text":"gm_StandardSBM model","code":""},{"path":[]},{"path":"/reference/gm_StandardSBM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard stochastic blockmodel — gm_StandardSBM","text":"","code":"random_net <- gm_StandardSBM(N=100, M=100, L=1) Y <- random_net$Y$toarray() dim(Y) #> [1]   1 100 100"},{"path":"/reference/install_vimure.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Vimure and its dependencies — install_vimure","title":"Install Vimure and its dependencies — install_vimure","text":"install_vimure() installs just vimure python package direct dependencies.","code":""},{"path":"/reference/install_vimure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Vimure and its dependencies — install_vimure","text":"","code":"install_vimure(   method = c(\"auto\", \"virtualenv\", \"conda\"),   conda = \"auto\",   version = \"develop\",   envname = NULL,   restart_session = TRUE,   conda_python_version = NULL,   ...,   force = FALSE,   pip_ignore_installed = TRUE,   python_version = conda_python_version )"},{"path":"/reference/install_vimure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Vimure and its dependencies — install_vimure","text":"method Installation method. default, \"auto\" automatically finds method work local environment. Change default force specific installation method. Note \"virtualenv\" method available Windows. conda path conda executable. Use \"auto\" allow reticulate automatically find appropriate conda binary. See Finding Conda conda_binary() details. version Vimure version install. Valid values include: \"default\" installs  develop branch version specification like \"2.4\" \"2.4.0\". Note patch version supplied, latest patch release installed (e.g., \"2.4\" today installs version \"2.4.2\") full URL path installer binary python *.whl file. envname name, full path, environment Python packages installed. NULL (default), active environment set RETICULATE_PYTHON_ENV variable used; unset, r-reticulate environment used. restart_session Restart R session installing (note occur within RStudio). ... arguments passed reticulate::conda_install() reticulate::virtualenv_install(), depending method used. force Whether pip recreate 'r-reticulate' virtualenv. defaults FALSE. pip_ignore_installed Whether pip ignore installed python packages reinstall already installed python packages. defaults TRUE, ensure Vimure dependencies like NumPy compatible prebuilt Vimure binaries. python_version, conda_python_version Pass string like \"3.8\" request conda install specific Python version. ignored attempting install Python virtual environment. Note Python version must compatible requested Vimure version, documented : https://github.com/latentnetworks/vimure/blob/develop/src/python/setup.py","code":""},{"path":"/reference/install_vimure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Install Vimure and its dependencies — install_vimure","text":"may prompted download install miniconda reticulate find non-system installation python. Miniconda recommended installation method users, ensures R python installation isolated python installations. python packages default installed self-contained conda venv environment named \"r-reticulate\". Note \"conda\" supported method M1 Mac. initially declined miniconda installation prompt, can later manually install miniconda running reticulate::install_miniconda().","code":""},{"path":"/reference/install_vimure.html","id":"custom-installation","dir":"Reference","previous_headings":"","what":"Custom Installation","title":"Install Vimure and its dependencies — install_vimure","text":"install_vimure() required use vimure package. manually configure python environment required dependencies, can tell R use pointing reticulate , commonly setting environment variable:","code":"Sys.setenv(\"RETICULATE_PYTHON\" = \"~/path/to/python-env/bin/python\")"},{"path":"/reference/overall_reciprocity.html","id":null,"dir":"Reference","previous_headings":"","what":"Reciprocity of networks — overall_reciprocity","title":"Reciprocity of networks — overall_reciprocity","text":"Calculates reciprocity adjancency matrix","code":""},{"path":"/reference/overall_reciprocity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reciprocity of networks — overall_reciprocity","text":"","code":"overall_reciprocity(X)"},{"path":"/reference/overall_reciprocity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reciprocity of networks — overall_reciprocity","text":"X matrix","code":""},{"path":"/reference/parse_graph_from_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Parses a csv file to vm.io.RealNetwork class — parse_graph_from_csv","title":"Parses a csv file to vm.io.RealNetwork class — parse_graph_from_csv","text":"parse_graph_from_csv creates vimure.io.RealNetwork csv file argument csv file least Ego Alter columns, row defines one edge. dataframe can contains three optional columns: 'reporter' identify reports edge, 'layer' multidimensions networks 'weight' weighted adjancency matrix Use params ego, alter, reporter, weight layer map dataframe columns.","code":""},{"path":"/reference/parse_graph_from_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parses a csv file to vm.io.RealNetwork class — parse_graph_from_csv","text":"","code":"parse_graph_from_csv(   file,   weighted = F,   directed = T,   ego = \"Ego\",   alter = \"Alter\",   reporter = \"reporter\",   layer = \"layer\",   weight = \"weight\",   ... )"},{"path":"/reference/parse_graph_from_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parses a csv file to vm.io.RealNetwork class — parse_graph_from_csv","text":"file data.frame representing edgelist. weighted Whether add weights adjancency matrix. directed Whether create directed graph. ego Column name mapping Ego. alter Column name mapping Alter. reporter Column name mapping reporter. layer Column name mapping layer. weight Column name mapping weight. ... Additional args read.csv function","code":""},{"path":"/reference/parse_graph_from_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parses a csv file to vm.io.RealNetwork class — parse_graph_from_csv","text":"vimureP$io$RealNetwork","code":""},{"path":[]},{"path":"/reference/parse_graph_from_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Parses an edgelist dataframe to vm.io.RealNetwork class — parse_graph_from_edgelist","title":"Parses an edgelist dataframe to vm.io.RealNetwork class — parse_graph_from_edgelist","text":"parse_graph_from_edgelist creates vimure.io.RealNetwork edgelist dataframe. argument dataframe least Ego Alter columns, row defines one edge. dataframe can contains three optional columns: 'reporter' identify reports edge, 'layer' multidimensions networks 'weight' weighted adjancency matrix Use params ego, alter, reporter, weight layer map dataframe columns.","code":""},{"path":"/reference/parse_graph_from_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parses an edgelist dataframe to vm.io.RealNetwork class — parse_graph_from_edgelist","text":"","code":"parse_graph_from_edgelist(   edges,   nodes = NULL,   reporters = NULL,   weighted = F,   directed = T,   ego = \"Ego\",   alter = \"Alter\",   reporter = \"reporter\",   layer = \"layer\",   weight = \"weight\",   ... )"},{"path":"/reference/parse_graph_from_edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parses an edgelist dataframe to vm.io.RealNetwork class — parse_graph_from_edgelist","text":"edges data.frame representing edgelist. nodes List nodes. reporters List nodes took survey. weighted Whether add weights adjancency matrix. directed Whether create directed graph. ego Column name mapping Ego. alter Column name mapping Alter. reporter Column name mapping reporter. layer Column name mapping layer. weight Column name mapping weight. ... Additional args vm.io.RealNetwork class","code":""},{"path":"/reference/parse_graph_from_edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parses an edgelist dataframe to vm.io.RealNetwork class — parse_graph_from_edgelist","text":"vimureP$io$RealNetwork","code":""},{"path":[]},{"path":"/reference/parse_graph_from_igraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Parses an igraph object to vm.io.RealNetwork class — parse_graph_from_igraph","title":"Parses an igraph object to vm.io.RealNetwork class — parse_graph_from_igraph","text":"parse_graph_from_igraph creates vimure.io.RealNetwork igraph object. igraph can contains three optional edge attributes: 'reporter' identify reports edge, 'layer' multidimensions networks 'weight' weighted adjancency matrix Use params reporter, weight layer map edge attribute names.","code":""},{"path":"/reference/parse_graph_from_igraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parses an igraph object to vm.io.RealNetwork class — parse_graph_from_igraph","text":"","code":"parse_graph_from_igraph(   graph,   directed = T,   weighted = F,   weight = \"weight\",   reporter = \"reporter\",   layer = \"layer\" )"},{"path":"/reference/parse_graph_from_igraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parses an igraph object to vm.io.RealNetwork class — parse_graph_from_igraph","text":"graph igraph object. directed Whether create directed graph. weighted Whether add weights adjancency matrix. weight Edge attribute name mapping weight. reporter Edge attribute name mapping reporter. layer Edge attribute name mapping layer.","code":""},{"path":"/reference/parse_graph_from_igraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parses an igraph object to vm.io.RealNetwork class — parse_graph_from_igraph","text":"vimureP$io$RealNetwork","code":""},{"path":[]},{"path":"/reference/summary.vimure.model.VimureModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostics metrics — summary.vimure.model.VimureModel","title":"Diagnostics metrics — summary.vimure.model.VimureModel","text":"Diagnostics metrics","code":""},{"path":"/reference/summary.vimure.model.VimureModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostics metrics — summary.vimure.model.VimureModel","text":"","code":"# S3 method for vimure.model.VimureModel summary(object, net = NULL, ...)"},{"path":"/reference/summary.vimure.model.VimureModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostics metrics — summary.vimure.model.VimureModel","text":"object \"vimure\" object. net vm.io.baseNetwork object. ... Additional arguments affecting summary produced.","code":""},{"path":[]},{"path":"/reference/vimure.html","id":null,"dir":"Reference","previous_headings":"","what":"ViMuRe — vimure","title":"ViMuRe — vimure","text":"Fit probabilistic generative model double sampled networks. returns reliability parameters reporters (theta), average interactions links (lambda) estimate true unknown network (rho). inference performed Variational Inference approach.","code":""},{"path":"/reference/vimure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ViMuRe — vimure","text":"","code":"vimure(   x,   R = NULL,   mutuality = T,   undirected = F,   theta_prior = c(0.1, 0.1),   K = NULL,   lambda_prior = c(10, 10),   eta_prior = c(0.5, 1),   rho_prior = NULL,   seed = NULL,   etol = 0.1,   verbose = T,   ... )"},{"path":"/reference/vimure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ViMuRe — vimure","text":"x adjancency matrix dimensions L x N x N x N igraph object. R Reporters mask (TRUE/FALSE) indicating whether node CAN report particular tie, dimensions L x N x N x N. reporters mask informed, model assume every reporter can report tie. mutuality Whether use mutuality parameter. undirected Whether network undirected. theta_prior Shape scale hyperparameters variable theta. K Value maximum entry network - . lambda_prior Shape scale hyperparameters variable lambda. eta_prior Shape scale hyperparameters variable eta. rho_prior Array prior values rho parameter - ndarray. seed Pseudo random generator seed use. etol controls stop optimisation algorithm (CAVI). verbose Provides additional details. ... Additional args model$fit() method.","code":""},{"path":"/reference/vimure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ViMuRe — vimure","text":"vimure model","code":""},{"path":[]},{"path":"/reference/vm_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Vimure configuration information — vm_config","title":"Vimure configuration information — vm_config","text":"Vimure configuration information","code":""},{"path":"/reference/vm_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vimure configuration information — vm_config","text":"","code":"vm_config()  vm_version()"},{"path":"/reference/vm_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vimure configuration information — vm_config","text":"List information current configuration Vimure can determine whether Vimure found using availablemember,","code":""}]
