# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  push:
    branches: [main, develop]
    paths:
      - src/R/**
  pull_request:
    branches: [main, develop]
    paths:
      - src/R/**

name: R-CMD-check

defaults:
  run:
    shell: Rscript {0}

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: 'release'}
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-latest,   r: 'devel', http-user-agent: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-latest,   r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-latest,   r: 'oldrel-1', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
      RSPM: ${{ matrix.config.rspm }}
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true

    steps:
      - uses: actions/checkout@v2
      
      - uses: r-lib/actions/setup-r@v2
        id: setup-r
        with:
          r-version: ${{ matrix.r }}
          Ncpus: '2L'
          use-public-rspm: true
      
      - uses: r-lib/actions/setup-pandoc@v2
      
      - name: Get Date
        id: get-date
        shell: bash
        run: |
          echo "::set-output name=year-week::$(date -u "+%Y-%U")"
          echo "::set-output name=date::$(date -u "+%F")"
      
      - name: Prints the current branch name
        shell: bash
        run: echo "${{ github.head_ref }}"

      - name: Restore R package cache
        uses: actions/cache@v2
        id: r-package-cache
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ matrix.os }}-${{ steps.setup-r.outputs.installed-r-version }}-${{ steps.get-date.outputs.year-week }}-1

      - name: Install remotes
        if: steps.r-package-cache.outputs.cache-hit != 'true'
        run: install.packages("remotes")

      - name: Install system dependencies
        if: runner.os == 'Linux'
        shell: bash
        run: |
          . /etc/os-release
          while read -r cmd
          do
            echo "$cmd"
            sudo $cmd
          done < <(Rscript -e "writeLines(remotes::system_requirements('$ID-$VERSION_ID'))")
          
      - name: Install package + deps
        run: remotes::install_local(path="src/R/", dependencies = TRUE, force = TRUE)

      - name: Install Miniconda
        run: reticulate::install_miniconda()

      - name: Install vimure
        run: vimure::install_vimure(version = Sys.getenv("GITHUB_BRANCH"))
        env:
          GITHUB_BRANCH: ${{ github.head_ref || github.ref_name }} 

      - name: Install rcmdcheck
        run: remotes::install_cran("rcmdcheck")

      - name: Check
        run: rcmdcheck::rcmdcheck("src/R/", args = '--no-manual', error_on = 'warning', check_dir = 'check')

      - name: Show testthat output
        if: always()
        shell: bash
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true

      - name: Don't use tar from old Rtools to store the cache
        if: ${{ runner.os == 'Windows' && startsWith(steps.install-r.outputs.installed-r-version, '3') }}
        shell: bash
        run: echo "C:/Program Files/Git/usr/bin" >> $GITHUB_PATH
